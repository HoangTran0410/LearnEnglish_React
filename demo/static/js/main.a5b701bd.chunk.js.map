{"version":3,"sources":["commons/components/LoadingComponent/LoadingComponent.jsx","commons/components/ErrorBoundary.js","App.js","serviceWorker.js","index.js"],"names":["LoadingComponent","props","className","ErrorBoundary","state","err","error","errorInfo","console","log","this","onClick","window","location","reload","children","React","Component","HomePage","lazy","CoursesPage","LoginPage","MainLayout","AutoScrollToTop","loadingFullPage","style","height","display","alignItems","justifyContent","backgroundImage","Container","fallback","adminRoutes","frontPageRoutes","path","textAlign","padding","App","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a5b701bd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nexport default function LoadingComponent(props) {\r\n  return (\r\n    <div className=\"lds-heart-container\">\r\n      <div className=\"lds-heart\">\r\n        <div></div>\r\n      </div>\r\n      <br />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\n\r\nexport default class ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { err: null };\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    // Update state so the next render will show the fallback UI.\r\n    return { err: error };\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    // You can also log the error to an error reporting service\r\n    console.log(error, errorInfo);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.err) {\r\n      // You can render any custom fallback UI\r\n      return (\r\n        <div>\r\n          <h1>Gặp lỗi khi tải!</h1>\r\n          <p>{this.state.err}</p>\r\n          <button onClick={() => window.location.reload()}>Tải lại</button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}","import React, { Suspense } from 'react';\nimport {\n  // BrowserRouter as Router,\n  Switch,\n  Route,\n  HashRouter,\n  Redirect\n} from \"react-router-dom\";\n\n// import { TransitionGroup, CSSTransition } from \"react-transition-group\";\n\nimport ErrorBoundary from './commons/components/ErrorBoundary';\nimport LoadingComponent from './commons/components/LoadingComponent/LoadingComponent';\n\n// import HomePage from './pages/HomePage';\n// import CoursesPage from './pages/CoursesPage';\n// import LoginPage from './pages/LoginPage';\n// import MainLayout from './layouts/Main';\n// import AutoScrollToTop from './commons/components/AutoScrollToTop';\n\nconst HomePage = React.lazy(() => import('./pages/HomePage'));\nconst CoursesPage = React.lazy(() => import('./pages/CoursesPage'));\nconst LoginPage = React.lazy(() => import('./pages/LoginPage'));\nconst MainLayout = React.lazy(() => import('./layouts/Main'));\nconst AutoScrollToTop = React.lazy(() => import('./commons/components/AutoScrollToTop'));\n\nconst loadingFullPage = (\n  <div\n    style={{\n      height: \"100vh\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      backgroundImage: \"linear-gradient(to top, #48c6ef 0%, #6f86d6 100%)\"\n    }}\n  >\n    <LoadingComponent />\n  </div>\n)\n\nfunction Container() {\n  return (\n    <ErrorBoundary>\n      <Suspense fallback={loadingFullPage}>\n\n        <MainLayout adminRoutes={[\"/admin\"]} frontPageRoutes={[\"/home\", \"/\", \"/courses\", \"/login\"]}>\n          <AutoScrollToTop>\n            <Switch>\n\n              <Route path={[\"/home\", \"/\"]}>\n                <HomePage />\n              </Route>\n\n              <Route path=\"/courses\">\n                <CoursesPage />\n              </Route>\n\n              <Route path=\"/login\">\n                <LoginPage />\n              </Route>\n\n              <Route>\n                <h2 style={{ textAlign: 'center', padding: 100 }}>Not Thing Yet</h2>\n              </Route>\n\n            </Switch>\n          </AutoScrollToTop>\n        </MainLayout>\n\n      </Suspense>\n    </ErrorBoundary>\n  );\n}\n\nconst App = () => (\n  <HashRouter>\n    <Container />\n  </HashRouter>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport('antd/dist/antd.css');\nimport('./styles/bootstrap.min.css');\nimport('./styles/main-styles.css');\nimport('./styles/responsive.css');\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}